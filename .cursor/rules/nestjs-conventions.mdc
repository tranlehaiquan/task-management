---
globs: apps/**/src/**/*.ts
description: NestJS conventions for modules, controllers, services, DTOs, guards, and middleware
---

# NestJS Conventions

- **Bootstrap**: `main.ts` bootstraps `AppModule` in each app (e.g., [apps/api-gateway/src/main.ts](mdc:apps/api-gateway/src/main.ts)).
- **Modules**: Declare controllers and providers; import shared modules as needed (e.g., [apps/api-gateway/src/app.module.ts](mdc:apps/api-gateway/src/app.module.ts)).
- **Controllers**: Handle routing only; delegate logic to services (e.g., [apps/user-service/src/users/users.controller.ts](mdc:apps/user-service/src/users/users.controller.ts)).
- **Services**: Encapsulate business logic and data access (e.g., [apps/user-service/src/users/users.service.ts](mdc:apps/user-service/src/users/users.service.ts)).
- **DTOs**: Place under `dto/` and use them to define request/response shapes (e.g., [apps/api-gateway/src/users/dto/create-user.dto.ts](mdc:apps/api-gateway/src/users/dto/create-user.dto.ts)).
- **Guards**: Place under `guards/` for cross-cutting concerns like auth (e.g., [apps/api-gateway/src/guards/auth.guards.ts](mdc:apps/api-gateway/src/guards/auth.guards.ts)).
- **Middleware**: Place under `middleware/` for request logging and preprocessing (e.g., [apps/api-gateway/src/middleware/logger.middleware.ts](mdc:apps/api-gateway/src/middleware/logger.middleware.ts)).

Guidelines:

- Keep controllers thin; avoid business logic and persistence there.
- Prefer dependency injection; avoid static singletons.
- Validate inputs via DTOs. Keep transformations and validation close to DTO definitions.
- Use guard clauses and early returns in handlers/services for readability.
- Keep feature code colocated within the app; share only via `packages/*` if reusable.
