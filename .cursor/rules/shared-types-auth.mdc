---
globs: apps/**/src/**/*.ts,packages/shared-types/**
description: Shared types and authentication patterns across microservices
---

# Shared Types & Authentication

## Shared Types Package

- **Location**: [packages/shared-types/src/index.ts](mdc:packages/shared-types/src/index.ts)
- **Auth Types**: [packages/shared-types/src/auth.types.ts](mdc:packages/shared-types/src/auth.types.ts)

### Key Types:

- `UserJWTPayload` - Complete JWT token payload with user profile + JWT claims (`iat`, `exp`)
- `CurrentUser` - Sanitized user data for `request.user` (excludes JWT-specific fields)

**Important**: User timestamps use ISO 8601 strings (e.g., "2024-01-15T10:30:00.000Z") for readability. JWT claims (iat, exp) remain as epoch seconds per standard.

## Authentication Flow (API Gateway)

### 1. Auth Guard Pattern

**Location**: [apps/api-gateway/src/guards/auth.guards.ts](mdc:apps/api-gateway/src/guards/auth.guards.ts)

**Two-step flow**:
1. **JWT Validation**: Call `AUTH_SERVICE.auth.validateToken` → returns `UserJWTPayload | null`
2. **User Data Fetch**: Call `USER_SERVICE.user.findById(payload.id)` → returns `CurrentUser | null`

**Constructor Dependencies**:
```typescript
constructor(
  @Inject('AUTH_SERVICE') private readonly authService: ClientProxy,
  @Inject('USER_SERVICE') private readonly userService: ClientProxy,
) {}
```

### 2. User Decorator Pattern

**Location**: [apps/api-gateway/src/decorators/user.decorator.ts](mdc:apps/api-gateway/src/decorators/user.decorator.ts)

**Usage**:
```typescript
import type { CurrentUser as CurrentUserType } from '@task-mgmt/shared-types';

// In controllers:
async endpoint(@CurrentUser() user: CurrentUserType) {
  // user contains sanitized data, no JWT fields
}
```

## Guidelines

- **Import Pattern**: Always use `import type { ... } from '@task-mgmt/shared-types'` for type-only imports
- **Auth Guard**: Must inject both AUTH_SERVICE and USER_SERVICE for proper separation of concerns
- **Type Usage**: 
  - Use `UserJWTPayload` for JWT token validation
  - Use `CurrentUser` for request.user and @CurrentUser() decorator
- **Timestamp Handling**: User timestamps use ISO 8601 strings for readability
  - Convert Date to string: `date.toISOString()`
  - Convert string to Date: `new Date(isoString)`
  - JWT claims (iat, exp) remain as epoch seconds
- **No Duplication**: Never define JWT/user types locally; always import from shared-types
- **Service Boundaries**: 
  - AUTH_SERVICE: Only handles JWT validation/generation
  - USER_SERVICE: Only handles user data CRUD
  - API_GATEWAY: Orchestrates the auth flow