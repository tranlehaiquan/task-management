---
globs: *.ts,*.tsx
description: TypeScript style guide for this repository
---

# TypeScript Style

- **Naming**
  - Use descriptive names; avoid abbreviations.
  - Functions are verbs; variables are nouns.
- **Types**
  - Explicitly annotate exported/public APIs (functions, classes, DTOs).
  - Avoid `any` and unsafe casts; prefer precise types and generics.
  - Prefer `unknown` over `any` for untyped inputs.
- **Control flow**
  - Use guard clauses; handle error and edge cases first.
  - Avoid deep nesting beyond 2â€“3 levels.
- **Comments**
  - Comment "why", not "how". Keep comments concise and only for non-obvious logic.
- **Formatting**
  - Match existing formatting. Prefer multi-line over complex one-liners.
  - Keep lines reasonably short and readable.
- **Project specifics**
  - Follow NestJS patterns for modules/controllers/services (see related rule).
  - Keep business logic in services, not controllers.
- **Imports**
  - Use type-only imports where appropriate (e.g., `import type { X } from '...'`).
  - Import shared code from published package entry points:
    - Database: `from '@task-mgmt/database'` ([packages/database/src/index.ts](mdc:packages/database/src/index.ts))
    - Types: `from '@task-mgmt/shared-types'` ([packages/shared-types/src/index.ts](mdc:packages/shared-types/src/index.ts))
    - Config: `from '@task-mgmt/shared-config'` ([packages/shared-config/src/index.ts](mdc:packages/shared-config/src/index.ts))
    - Mail: `from '@task-mgmt/mail'` ([packages/mail/src/index.ts](mdc:packages/mail/src/index.ts))
    - Queue: `from '@task-mgmt/queue'` ([packages/queue/src/index.ts](mdc:packages/queue/src/index.ts))
    - Shared Utils: `from '@task-mgmt/shared-utils'` ([packages/shared-utils/src/index.ts](mdc:packages/shared-utils/src/index.ts))
  - **Never duplicate types**: Always import `UserJWTPayload`, `CurrentUser` from shared-types package
  - Prefer workspace package imports over relative paths for shared code
- **DTOs & Transformations**
  - Type `@Transform` decorators properly to avoid `any` returns:
    ```typescript
    @Transform(({ value }): string => (typeof value === 'string' ? value.trim() : value))
    ```
  - Use explicit return types for class-transformer decorators
  - Keep validation logic close to DTO definitions
